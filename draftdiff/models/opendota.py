# generated by datamodel-codegen:
#   filename:  opendota_openapi_spec.json
#   timestamp: 2025-08-19T04:19:47+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any

from pydantic import BaseModel, Field


class GoldPerMinItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: float | None = Field(None, description='value')


class XpPerMinItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: float | None = Field(None, description='value')


class KillsPerMinItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: float | None = Field(None, description='value')


class LastHitsPerMinItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: float | None = Field(None, description='value')


class HeroDamagePerMinItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: float | None = Field(None, description='value')


class HeroHealingPerMinItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: float | None = Field(None, description='value')


class TowerDamageItem(BaseModel):
    percentile: float | None = Field(None, description='percentile')
    value: int | None = Field(None, description='value')


class Result(BaseModel):
    gold_per_min: list[GoldPerMinItem] | None = None
    xp_per_min: list[XpPerMinItem] | None = None
    kills_per_min: list[KillsPerMinItem] | None = None
    last_hits_per_min: list[LastHitsPerMinItem] | None = None
    hero_damage_per_min: list[HeroDamagePerMinItem] | None = None
    hero_healing_per_min: list[HeroHealingPerMinItem] | None = None
    tower_damage: list[TowerDamageItem] | None = None


class BenchmarksResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    result: Result | None = Field(None, description='result')


class Row(BaseModel):
    bin: int | None = Field(None, description='bin')
    bin_name: int | None = Field(None, description='bin_name')
    count: int | None = Field(None, description='count')
    cumulative_sum: int | None = Field(None, description='cumulative_sum')


class Sum(BaseModel):
    count: int | None = Field(None, description='count')


class Ranks(BaseModel):
    rows: list[Row] | None = Field(None, description='rows')
    sum: Sum | None = Field(None, description='sum')


class DistributionsResponse(BaseModel):
    ranks: Ranks | None = Field(None, description='ranks')


class HeroDurationsResponse(BaseModel):
    duration_bin: str | None = Field(None, description='Lower bound of number of seconds the match lasted')
    games_played: int | None = Field(None, description='Number of games played')
    wins: int | None = Field(None, description='Number of wins')


class StartGameItems(BaseModel):
    item: int | None = Field(None, description='Number of item bought')


class EarlyGameItems(BaseModel):
    item: int | None = Field(None, description='Number of item bought')


class MidGameItems(BaseModel):
    item: int | None = Field(None, description='Number of item bought')


class LateGameItems(BaseModel):
    item: int | None = Field(None, description='Number of item bought')


class HeroItemPopularityResponse(BaseModel):
    start_game_items: StartGameItems | None = Field(None, description='Items bought before game started')
    early_game_items: EarlyGameItems | None = Field(
        None,
        description='Items bought in the first 10 min of the game, with cost at least 700',
    )
    mid_game_items: MidGameItems | None = Field(
        None,
        description='Items bought between 10 and 25 min of the game, with cost at least 2000',
    )
    late_game_items: LateGameItems | None = Field(
        None,
        description='Items bought at least 25 min after game started, with cost at least 4000',
    )


class HeroMatchupsResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    games_played: int | None = Field(None, description='Number of games played')
    wins: int | None = Field(None, description='Number of games won')


class HeroObjectResponse(BaseModel):
    id: int = Field(..., description='The ID value of the hero played')
    name: str | None = Field(None, description='Dota hero command name', example='npc_dota_hero_antimage')
    localized_name: str | None = Field(None, description='Hero name', example='Anti-Mage')
    primary_attr: str | None = Field(None, description="Hero primary shorthand attribute name, e.g. 'agi'")
    attack_type: str | None = Field(None, description="Hero attack type, either 'Melee' or 'Ranged'")
    roles: list[str] | None = None


class HeroStatsResponse(BaseModel):
    id: int | None = Field(None, description='The ID value of the hero played')
    name: str | None = Field(None, description='Dota hero command name', example='npc_dota_hero_antimage')
    localized_name: str | None = Field(None, description='Hero name', example='Anti-Mage')
    primary_attr: str | None = Field(None, description='primary_attr')
    attack_type: str | None = Field(None, description='attack_type')
    roles: list[str] | None = Field(None, description='roles')
    img: str | None = Field(None, description='img')
    icon: str | None = Field(None, description='icon')
    base_health: int | None = Field(None, description='base_health')
    base_health_regen: float | None = Field(None, description='base_health_regen')
    base_mana: int | None = Field(None, description='base_mana')
    base_mana_regen: int | None = Field(None, description='base_mana_regen')
    base_armor: int | None = Field(None, description='base_armor')
    base_mr: int | None = Field(None, description='base_mr')
    base_attack_min: int | None = Field(None, description='base_attack_min')
    base_attack_max: int | None = Field(None, description='base_attack_max')
    base_str: int | None = Field(None, description='base_str')
    base_agi: int | None = Field(None, description='base_agi')
    base_int: int | None = Field(None, description='base_int')
    str_gain: float | None = Field(None, description='str_gain')
    agi_gain: float | None = Field(None, description='agi_gain')
    int_gain: float | None = Field(None, description='int_gain')
    attack_range: int | None = Field(None, description='attack_range')
    projectile_speed: int | None = Field(None, description='projectile_speed')
    attack_rate: float | None = Field(None, description='attack_rate')
    base_attack_time: int | None = Field(None, description='base_attack_time')
    attack_point: float | None = Field(None, description='attack_point')
    move_speed: int | None = Field(None, description='move_speed')
    turn_rate: float | None = Field(None, description='turn_rate')
    cm_enabled: bool | None = Field(None, description='cm_enabled')
    legs: int | None = Field(None, description='legs')
    day_vision: int | None = Field(None, description='day_vision')
    night_vision: int | None = Field(None, description='night_vision')
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    turbo_picks: int | None = Field(None, description='Picks in Turbo mode this month')
    turbo_wins: int | None = Field(None, description='Wins in Turbo mode this month')
    pro_ban: int | None = Field(None, description='pro_ban')
    pro_win: int | None = Field(None, description='pro_win')
    pro_pick: int | None = Field(None, description='pro_pick')
    field_1_pick: int | None = Field(None, alias='1_pick', description='Herald picks')
    field_1_win: int | None = Field(None, alias='1_win', description='Herald wins')
    field_2_pick: int | None = Field(None, alias='2_pick', description='Guardian picks')
    field_2_win: int | None = Field(None, alias='2_win', description='Guardian wins')
    field_3_pick: int | None = Field(None, alias='3_pick', description='Crusader picks')
    field_3_win: int | None = Field(None, alias='3_win', description='Crusader wins')
    field_4_pick: int | None = Field(None, alias='4_pick', description='Archon picks')
    field_4_win: int | None = Field(None, alias='4_win', description='Archon wins')
    field_5_pick: int | None = Field(None, alias='5_pick', description='Legend picks')
    field_5_win: int | None = Field(None, alias='5_win', description='Legend wins')
    field_6_pick: int | None = Field(None, alias='6_pick', description='Ancient picks')
    field_6_win: int | None = Field(None, alias='6_win', description='Ancient wins')
    field_7_pick: int | None = Field(None, alias='7_pick', description='Divine picks')
    field_7_win: int | None = Field(None, alias='7_win', description='Divine wins')
    field_8_pick: int | None = Field(None, alias='8_pick', description='Immortal picks')
    field_8_win: int | None = Field(None, alias='8_win', description='Immortal wins')


class LeagueObjectResponse(BaseModel):
    leagueid: int | None = Field(None, description='leagueid')
    ticket: str | None = Field(None, description='ticket')
    banner: str | None = Field(None, description='banner')
    tier: str | None = Field(None, description='tier')
    name: str | None = Field(None, description='League name', example='ASUS ROG DreamLeague Season 4')


class MatchObjectResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    duration: int | None = Field(None, description='Duration of the game in seconds')
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    radiant_team_id: int | None = Field(None, description="The Radiant's team_id")
    radiant_name: str | None = Field(None, description="The Radiant's team name")
    dire_team_id: int | None = Field(None, description="The Dire's team_id")
    dire_name: str | None = Field(None, description="The Dire's team name")
    leagueid: int | None = Field(None, description='Identifier for the league the match took place in')
    league_name: str | None = Field(None, description='Name of league the match took place in')
    series_id: int | None = Field(None, description='Identifier for the series of the match')
    series_type: int | None = Field(None, description='Type of series the match was')
    radiant_score: int | None = Field(None, description='Number of kills the Radiant team had when the match ended')
    dire_score: int | None = Field(None, description='Number of kills the Dire team had when the match ended')
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    radiant: bool | None = Field(None, description='Whether the team/player/hero was on Radiant')


class ChatItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds at which the message was said')
    unit: str | None = Field(None, description='Name of the player who sent the message')
    key: str | None = Field(None, description='The message the player sent')
    slot: int | None = Field(None, description='slot')
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )


class DraftTiming(BaseModel):
    order: int | None = Field(None, description='order')
    pick: bool | None = Field(None, description='pick')
    active_team: int | None = Field(None, description='active_team')
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )
    extra_time: int | None = Field(None, description='extra_time')
    total_time_taken: int | None = Field(None, description='total_time_taken')


class PicksBan(BaseModel):
    is_pick: bool | None = Field(None, description='Boolean indicating whether the choice is a pick or a ban')
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    team: int | None = Field(None, description='The team that picked or banned the hero')
    order: int | None = Field(None, description='The order of the pick or ban')


class BuybackLogItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds the buyback occurred')
    slot: int | None = Field(None, description='slot')
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )


class ConnectionLogItem(BaseModel):
    time: int | None = Field(None, description='Game time in seconds the event ocurred')
    event: str | None = Field(None, description='Event that occurred')
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )


class KillsLogItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds the player killed the hero')
    key: str | None = Field(None, description='Hero killed')


class PurchaseLogItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds the item was bought')
    key: str | None = Field(None, description='String item ID')
    charges: int | None = Field(None, description='Integer amount of charges')


class RunesLogItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds rune picked up')
    key: int | None = Field(None, description='key')


class Cosmetic(BaseModel):
    item_id: int | None = None
    name: str | None = Field(None, description='name')
    prefab: str | None = None
    creation_date: datetime | None = None
    image_inventory: str | None = None
    image_path: str | None = None
    item_description: str | None = None
    item_name: str | None = None
    item_rarity: str | None = None
    item_type_name: str | None = None
    used_by_heroes: str | None = None


class NeutralTokensLogItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds at which the token was dropped')
    key: str | None = Field(None, description='Type of token dropped')


class NeutralItemHistoryItem(BaseModel):
    time: int | None = Field(None, description='Time in seconds at which the item was crafted')
    item_neutral: str | None = Field(None, description='Neutral item name')
    item_neutral_enhancement: str | None = Field(None, description='Neutral enhancement name')


class Player(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )
    ability_upgrades_arr: list[int] | None = Field(None, description='An array describing how abilities were upgraded')
    ability_uses: dict[str, Any] | None = Field(
        None,
        description='Object containing information on how many times the played used their abilities',
    )
    ability_targets: dict[str, Any] | None = Field(
        None,
        description='Object containing information on who the player used their abilities on',
    )
    damage_targets: dict[str, Any] | None = Field(
        None,
        description='Object containing information on how and how much damage the player dealt to other heroes',
    )
    account_id: int | None = Field(None, description='The player account ID')
    actions: dict[str, Any] | None = Field(
        None,
        description='Object containing information on how many and what type of actions the player issued to their hero',
    )
    additional_units: list[dict[str, Any]] | None = Field(
        None,
        description='Object containing information on additional units the player had under their control',
    )
    assists: int | None = Field(None, description='Number of assists the player had')
    backpack_0: int | None = Field(None, description='Item in backpack slot 0')
    backpack_1: int | None = Field(None, description='Item in backpack slot 1')
    backpack_2: int | None = Field(None, description='Item in backpack slot 2')
    buyback_log: list[BuybackLogItem] | None = Field(None, description='Array containing information about buybacks')
    camps_stacked: int | None = Field(None, description='Number of camps stacked')
    connection_log: list[ConnectionLogItem] | None = Field(
        None,
        description="Array containing information about the player's disconnections and reconnections",
    )
    creeps_stacked: int | None = Field(None, description='Number of creeps stacked')
    damage: dict[str, Any] | None = Field(
        None,
        description='Object containing information about damage dealt by the player to different units',
    )
    damage_inflictor: dict[str, Any] | None = Field(
        None,
        description="Object containing information about about the sources of this player's damage to heroes",
    )
    damage_inflictor_received: dict[str, Any] | None = Field(
        None,
        description='Object containing information about the sources of damage received by this player from heroes',
    )
    damage_taken: dict[str, Any] | None = Field(
        None,
        description='Object containing information about from whom the player took damage',
    )
    deaths: int | None = Field(None, description='Number of deaths')
    denies: int | None = Field(None, description='Number of denies')
    dn_t: list[int] | None = Field(
        None,
        description='Array containing number of denies at different times of the match',
    )
    gold: int | None = Field(None, description='Gold at the end of the game')
    gold_per_min: int | None = Field(None, description='Gold Per Minute obtained by this player')
    gold_reasons: dict[str, Any] | None = Field(
        None,
        description='Object containing information on how the player gainined gold over the course of the match',
    )
    gold_spent: int | None = Field(None, description='How much gold the player spent')
    gold_t: list[int] | None = Field(None, description='Array containing total gold at different times of the match')
    hero_damage: int | None = Field(None, description='Hero Damage Dealt')
    hero_healing: int | None = Field(None, description='Hero Healing Done')
    hero_hits: dict[str, Any] | None = Field(
        None,
        description='Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors',
    )
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    item_0: int | None = Field(None, description="Item in the player's first slot")
    item_1: int | None = Field(None, description="Item in the player's second slot")
    item_2: int | None = Field(None, description="Item in the player's third slot")
    item_3: int | None = Field(None, description="Item in the player's fourth slot")
    item_4: int | None = Field(None, description="Item in the player's fifth slot")
    item_5: int | None = Field(None, description="Item in the player's sixth slot")
    item_uses: dict[str, Any] | None = Field(
        None,
        description='Object containing information about how many times a player used items',
    )
    kill_streaks: dict[str, Any] | None = Field(
        None, description="Object containing information about the player's killstreaks"
    )
    killed: dict[str, Any] | None = Field(
        None,
        description='Object containing information about what units the player killed',
    )
    killed_by: dict[str, Any] | None = Field(
        None, description='Object containing information about who killed the player'
    )
    kills: int | None = Field(None, description='Number of kills')
    kills_log: list[KillsLogItem] | None = Field(
        None,
        description='Array containing information on which hero the player killed at what time',
    )
    lane_pos: dict[str, Any] | None = Field(None, description='Object containing information on lane position')
    last_hits: int | None = Field(None, description='Number of last hits')
    leaver_status: int | None = Field(
        None,
        description="Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned",
    )
    level: int | None = Field(None, description='Level at the end of the game')
    lh_t: list[int] | None = Field(None, description='Array describing last hits at each minute in the game')
    life_state: dict[str, Any] | None = Field(None, description='life_state')
    max_hero_hit: dict[str, Any] | None = Field(
        None,
        description='Object with information on the highest damage instance the player inflicted',
    )
    multi_kills: dict[str, Any] | None = Field(
        None,
        description='Object with information on the number of the number of multikills the player had',
    )
    obs: dict[str, Any] | None = Field(
        None,
        description='Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192.',
    )
    obs_left_log: list[dict[str, Any]] | None = Field(None, description='obs_left_log')
    obs_log: list[dict[str, Any]] | None = Field(
        None,
        description='Object containing information on when and where the player placed observer wards',
    )
    obs_placed: int | None = Field(None, description='Total number of observer wards placed')
    party_id: int | None = Field(None, description='party_id')
    permanent_buffs: list[dict[str, Any]] | None = Field(
        None,
        description='Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json',
    )
    hero_variant: int | None = Field(
        None,
        description='1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json',
    )
    pings: int | None = Field(None, description='Total number of pings')
    purchase: dict[str, Any] | None = Field(
        None,
        description='Object containing information on the items the player purchased',
    )
    purchase_log: list[PurchaseLogItem] | None = Field(
        None, description='Object containing information on when items were purchased'
    )
    rune_pickups: int | None = Field(None, description='Number of runes picked up')
    runes: dict[str, int] | None = Field(
        None,
        description='Object with information about which runes the player picked up',
    )
    runes_log: list[RunesLogItem] | None = Field(
        None, description='Array with information on when runes were picked up'
    )
    sen: dict[str, Any] | None = Field(
        None,
        description='Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192.',
    )
    sen_left_log: list[dict[str, Any]] | None = Field(
        None,
        description='Array containing information on when and where the player placed sentries',
    )
    sen_log: list[dict[str, Any]] | None = Field(
        None,
        description='Array with information on when and where sentries were placed by the player',
    )
    sen_placed: int | None = Field(None, description='How many sentries were placed by the player')
    stuns: float | None = Field(None, description='Total stun duration of all stuns by the player')
    times: list[int] | None = Field(
        None,
        description='Time in seconds corresponding to the time of entries of other arrays in the match.',
    )
    tower_damage: int | None = Field(None, description='Total tower damage done by the player')
    xp_per_min: int | None = Field(None, description='Experience Per Minute obtained by the player')
    xp_reasons: dict[str, Any] | None = Field(
        None,
        description="Object containing information on the sources of this player's experience",
    )
    xp_t: list[int] | None = Field(None, description='Experience at each minute of the game')
    personaname: str | None = Field(None, description="Player's Steam name", example='420 booty wizard')
    name: str | None = Field(None, description='name')
    last_login: datetime | None = Field(None, description="Time of player's last login")
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    duration: int | None = Field(None, description='Duration of the game in seconds')
    cluster: int | None = Field(None, description='cluster')
    lobby_type: int | None = Field(
        None,
        description='Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json',
    )
    game_mode: int | None = Field(
        None,
        description='Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json',
    )
    patch: int | None = Field(None, description='Patch ID, from dotaconstants')
    region: int | None = Field(None, description='Integer corresponding to the region the game was played on')
    isRadiant: bool | None = Field(None, description='Boolean for whether or not the player is on Radiant')
    win: int | None = Field(None, description='Binary integer representing whether or not the player won')
    lose: int | None = Field(None, description='Binary integer representing whether or not the player lost')
    total_gold: int | None = Field(None, description='Total gold at the end of the game')
    total_xp: int | None = Field(None, description='Total experience at the end of the game')
    kills_per_min: float | None = Field(None, description='Number of kills per minute')
    kda: float | None = Field(None, description='kda')
    abandons: int | None = Field(None, description='abandons')
    neutral_kills: int | None = Field(None, description='Total number of neutral creeps killed')
    tower_kills: int | None = Field(None, description='Total number of tower kills the player had')
    courier_kills: int | None = Field(None, description='Total number of courier kills the player had')
    lane_kills: int | None = Field(None, description='Total number of lane creeps killed by the player')
    hero_kills: int | None = Field(None, description='Total number of heroes killed by the player')
    observer_kills: int | None = Field(None, description='Total number of observer wards killed by the player')
    sentry_kills: int | None = Field(None, description='Total number of sentry wards killed by the player')
    roshan_kills: int | None = Field(
        None,
        description='Total number of roshan kills (last hit on roshan) the player had',
    )
    necronomicon_kills: int | None = Field(None, description='Total number of Necronomicon creeps killed by the player')
    ancient_kills: int | None = Field(None, description='Total number of Ancient creeps killed by the player')
    buyback_count: int | None = Field(None, description='Total number of buyback the player used')
    observer_uses: int | None = Field(None, description='Number of observer wards used')
    sentry_uses: int | None = Field(None, description='Number of sentry wards used')
    lane_efficiency: float | None = Field(None, description='lane_efficiency')
    lane_efficiency_pct: float | None = Field(None, description='lane_efficiency_pct')
    lane: int | None = Field(None, description='Integer referring to which lane the hero laned in')
    lane_role: int | None = Field(None, description='lane_role')
    is_roaming: bool | None = Field(None, description='Boolean referring to whether or not the player roamed')
    purchase_time: dict[str, Any] | None = Field(
        None,
        description='Object with information on when the player last purchased an item',
    )
    first_purchase_time: dict[str, Any] | None = Field(
        None,
        description='Object with information on when the player first puchased an item',
    )
    item_win: dict[str, Any] | None = Field(None, description='Object with information on whether or not the item won')
    item_usage: dict[str, Any] | None = Field(
        None,
        description='Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1)',
    )
    purchase_tpscroll: int | None = Field(None, description='Total number of TP scrolls purchased by the player')
    actions_per_min: int | None = Field(None, description='Actions per minute')
    life_state_dead: int | None = Field(None, description='life_state_dead')
    rank_tier: int | None = Field(
        None,
        description='The rank tier of the player. Tens place indicates rank, ones place indicates stars.',
    )
    cosmetics: list[Cosmetic] | None = Field(None, description='cosmetics')
    benchmarks: dict[str, Any] | None = Field(
        None,
        description='Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc',
    )
    neutral_tokens_log: list[NeutralTokensLogItem] | None = Field(
        None, description='Object containing information on neutral tokens drops'
    )
    neutral_item_history: list[NeutralItemHistoryItem] | None = Field(
        None, description='Object containing information on neutral item history'
    )


class MatchResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    barracks_status_dire: int | None = Field(
        None,
        description='Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.',
    )
    barracks_status_radiant: int | None = Field(
        None,
        description='Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.',
    )
    chat: list[ChatItem] | None = Field(None, description='Array containing information on the chat of the game')
    cluster: int | None = Field(None, description='cluster')
    cosmetics: dict[str, int] | None = Field(None, description='cosmetics')
    dire_score: int | None = Field(None, description='Number of kills the Dire team had when the match ended')
    draft_timings: list[DraftTiming] | None = Field(None, description='draft_timings')
    duration: int | None = Field(None, description='Duration of the game in seconds')
    engine: int | None = Field(None, description='engine')
    first_blood_time: int | None = Field(None, description='Time in seconds at which first blood occurred')
    game_mode: int | None = Field(
        None,
        description='Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json',
    )
    human_players: int | None = Field(None, description='Number of human players in the game')
    leagueid: int | None = Field(None, description='leagueid')
    lobby_type: int | None = Field(
        None,
        description='Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json',
    )
    match_seq_num: int | None = Field(None, description='match_seq_num')
    negative_votes: int | None = Field(
        None,
        description='Number of negative votes the replay received in the in-game client',
    )
    objectives: list[dict[str, Any]] | None = Field(None, description='objectives')
    picks_bans: list[PicksBan] | None = Field(
        None,
        description='Array containing information on the draft. Each item contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.',
    )
    positive_votes: int | None = Field(
        None,
        description='Number of positive votes the replay received in the in-game client',
    )
    radiant_gold_adv: list[float] | None = Field(
        None,
        description='Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. ',
    )
    radiant_score: int | None = Field(None, description='Number of kills the Radiant team had when the match ended')
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    radiant_xp_adv: list[float] | None = Field(
        None,
        description='Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. ',
    )
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    teamfights: list[dict[str, Any]] | None = Field(None, description='teamfights')
    tower_status_dire: int | None = Field(
        None,
        description='Bitmask. An integer that represents a binary of which Dire towers are still standing.',
    )
    tower_status_radiant: int | None = Field(
        None,
        description='Bitmask. An integer that represents a binary of which Radiant towers are still standing.',
    )
    version: int | None = Field(None, description='Parse version, used internally by OpenDota')
    replay_salt: int | None = Field(None, description='replay_salt')
    series_id: int | None = Field(None, description='series_id')
    series_type: int | None = Field(None, description='series_type')
    radiant_team: dict[str, Any] | None = Field(None, description='radiant_team')
    dire_team: dict[str, Any] | None = Field(None, description='dire_team')
    league: dict[str, Any] | None = Field(None, description='league')
    skill: int | None = Field(None, description='Skill bracket assigned by Valve (Normal, High, Very High)')
    players: list[Player] | None = Field(None, description='Array of information on individual players')
    patch: int | None = Field(None, description='Patch ID, from dotaconstants')
    region: int | None = Field(None, description='Integer corresponding to the region the game was played on')
    all_word_counts: dict[str, Any] | None = Field(
        None, description="Word counts of the all chat messages in the player's games"
    )
    my_word_counts: dict[str, Any] | None = Field(None, description="Word counts of the player's all chat messages")
    throw: int | None = Field(
        None,
        description="Maximum gold advantage of the player's team if they lost the match",
    )
    comeback: int | None = Field(
        None,
        description="Maximum gold disadvantage of the player's team if they won the match",
    )
    loss: int | None = Field(
        None,
        description="Maximum gold disadvantage of the player's team if they lost the match",
    )
    win: int | None = Field(
        None,
        description="Maximum gold advantage of the player's team if they won the match",
    )
    replay_url: str | None = Field(None, description='replay_url')


class MetadataResponse(BaseModel):
    banner: dict[str, Any] | None = Field(None, description='banner')


class ParsedMatchesResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )


class PlayerCountsResponse(BaseModel):
    leaver_status: dict[str, Any] | None = Field(
        None,
        description="Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned",
    )
    game_mode: dict[str, Any] | None = Field(
        None,
        description='Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json',
    )
    lobby_type: dict[str, Any] | None = Field(
        None,
        description='Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json',
    )
    lane_role: dict[str, Any] | None = Field(None, description='lane_role')
    region: dict[str, Any] | None = Field(
        None, description='Integer corresponding to the region the game was played on'
    )
    patch: dict[str, Any] | None = Field(None, description='Patch ID, from dotaconstants')


class PlayerHeroesResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    last_played: int | None = Field(None, description='last_played')
    games: int | None = Field(None, description='games')
    win: int | None = Field(None, description='win')
    with_games: int | None = Field(None, description='with_games')
    with_win: int | None = Field(None, description='with_win')
    against_games: int | None = Field(None, description='against_games')
    against_win: int | None = Field(None, description='against_win')


class PlayerMatchesResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    duration: int | None = Field(None, description='Duration of the game in seconds')
    game_mode: int | None = Field(
        None,
        description='Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json',
    )
    lobby_type: int | None = Field(
        None,
        description='Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json',
    )
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    version: int | None = Field(None, description='version')
    kills: int | None = Field(None, description='Total kills the player had at the end of the game')
    deaths: int | None = Field(None, description='Total deaths the player had at the end of the game')
    assists: int | None = Field(None, description='Total assists the player had at the end of the game')
    skill: int | None = Field(None, description='Skill bracket assigned by Valve (Normal, High, Very High)')
    average_rank: int | None = Field(None, description='Average rank of players with public match data')
    leaver_status: int | None = Field(
        None,
        description="Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned",
    )
    party_size: int | None = Field(None, description="Size of the player's party")
    hero_variant: int | None = Field(
        None,
        description='1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json',
    )


class PlayerObjectResponse(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    steamid: str | None = Field(None, description="Player's steam identifier")
    avatar: str | None = Field(None, description='Steam picture URL (small picture)')
    avatarmedium: str | None = Field(None, description='Steam picture URL (medium picture)')
    avatarfull: str | None = Field(None, description='Steam picture URL (full picture)')
    profileurl: str | None = Field(None, description='Steam profile URL')
    personaname: str | None = Field(None, description="Player's Steam name", example='420 booty wizard')
    last_login: datetime | None = Field(None, description='Date and time of last login to OpenDota')
    full_history_time: datetime | None = Field(
        None,
        description="Date and time of last request to refresh player's match history",
    )
    cheese: int | None = Field(None, description='Amount of dollars the player has donated to OpenDota')
    fh_unavailable: bool | None = Field(None, description="Whether the refresh of player' match history failed")
    loccountrycode: str | None = Field(None, description="Player's country identifier, e.g. US")
    name: str | None = Field(None, description="Verified player name, e.g. 'Miracle-'")
    country_code: str | None = Field(None, description="Player's country code")
    fantasy_role: int | None = Field(None, description="Player's ingame role (core: 1 or support: 2)")
    team_id: int | None = Field(None, description="Player's team identifier")
    team_name: str | None = Field(None, description='Team name', example='Newbee')
    team_tag: str | None = Field(None, description="Player's team shorthand tag, e.g. 'EG'")
    is_locked: bool | None = Field(None, description='Whether the roster lock is active')
    is_pro: bool | None = Field(None, description='Whether the player is professional or not')
    locked_until: int | None = Field(None, description='When the roster lock will end')


class PlayerPeersResponse(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    last_played: int | None = Field(None, description='last_played')
    win: int | None = Field(None, description='win')
    games: int | None = Field(None, description='games')
    with_win: int | None = Field(None, description='with_win')
    with_games: int | None = Field(None, description='with_games')
    against_win: int | None = Field(None, description='against_win')
    against_games: int | None = Field(None, description='against_games')
    with_gpm_sum: int | None = Field(None, description='with_gpm_sum')
    with_xpm_sum: int | None = Field(None, description='with_xpm_sum')
    personaname: str | None = Field(None, description="Player's Steam name", example='420 booty wizard')
    name: str | None = Field(None, description='name')
    is_contributor: bool | None = Field(None, description='is_contributor')
    is_subscriber: bool | None = Field(None, description='is_subscriber')
    last_login: str | None = Field(None, description='last_login')
    avatar: str | None = Field(None, description='avatar')
    avatarfull: str | None = Field(None, description='avatarfull')


class PlayerProsResponse(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    name: str | None = Field(None, description='name')
    country_code: str | None = Field(None, description='country_code')
    fantasy_role: int | None = Field(None, description='fantasy_role')
    team_id: int | None = Field(None, description='team_id')
    team_name: str | None = Field(None, description='Team name', example='Newbee')
    team_tag: str | None = Field(None, description='team_tag')
    is_locked: bool | None = Field(None, description='is_locked')
    is_pro: bool | None = Field(None, description='is_pro')
    locked_until: int | None = Field(None, description='locked_until')
    steamid: str | None = Field(None, description='steamid')
    avatar: str | None = Field(None, description='avatar')
    avatarmedium: str | None = Field(None, description='avatarmedium')
    avatarfull: str | None = Field(None, description='avatarfull')
    profileurl: str | None = Field(None, description='profileurl')
    last_login: datetime | None = Field(None, description='last_login')
    full_history_time: datetime | None = Field(None, description='full_history_time')
    cheese: int | None = Field(None, description='cheese')
    fh_unavailable: bool | None = Field(None, description='fh_unavailable')
    loccountrycode: str | None = Field(None, description='loccountrycode')
    last_played: int | None = Field(None, description='last_played')
    win: int | None = Field(None, description='win')
    games: int | None = Field(None, description='games')
    with_win: int | None = Field(None, description='with_win')
    with_games: int | None = Field(None, description='with_games')
    against_win: int | None = Field(None, description='against_win')
    against_games: int | None = Field(None, description='against_games')
    with_gpm_sum: int | None = Field(None, description='with_gpm_sum')
    with_xpm_sum: int | None = Field(None, description='with_xpm_sum')


class PlayerRankingsResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    score: float | None = Field(None, description='Hero score')
    percent_rank: float | None = Field(None, description='percent_rank')
    card: int | None = Field(None, description='numeric_rank')


class PlayerRatingsResponse(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    solo_competitive_rank: int | None = Field(None, description='solo_competitive_rank')
    competitive_rank: int | None = Field(None, description='competitive_rank')
    time: int | None = Field(None, description='time')


class PlayerRecentMatchesResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    player_slot: int | None = Field(
        None,
        description='Which slot the player is in. 0-127 are Radiant, 128-255 are Dire',
    )
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    duration: int | None = Field(None, description='Duration of the game in seconds')
    game_mode: int | None = Field(
        None,
        description='Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json',
    )
    lobby_type: int | None = Field(
        None,
        description='Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json',
    )
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    version: int | None = Field(None, description='version')
    kills: int | None = Field(None, description='Total kills the player had at the end of the match')
    deaths: int | None = Field(None, description='Total deaths the player had at the end of the match')
    assists: int | None = Field(None, description='Total assists the player had at the end of the match')
    skill: int | None = Field(
        None,
        description='Skill bracket assigned by Valve (Normal, High, Very High). If the skill is unknown, will return null.',
    )
    average_rank: int | None = Field(None, description='Average rank of players with public match data')
    xp_per_min: int | None = Field(None, description='Experience Per Minute obtained by the player')
    gold_per_min: int | None = Field(None, description='Average gold per minute of the player')
    hero_damage: int | None = Field(None, description='Total hero damage to enemy heroes')
    hero_healing: int | None = Field(None, description='Total healing of ally heroes')
    last_hits: int | None = Field(None, description='Total last hits the player had at the end of the match')
    lane: int | None = Field(
        None,
        description='Integer corresponding to which lane the player laned in for the match',
    )
    lane_role: int | None = Field(None, description='lane_role')
    is_roaming: bool | None = Field(None, description='Boolean describing whether or not the player roamed')
    cluster: int | None = Field(None, description='cluster')
    leaver_status: int | None = Field(
        None,
        description="Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned",
    )
    party_size: int | None = Field(None, description='Size of the players party. If not in a party, will return 1.')
    hero_variant: int | None = Field(
        None,
        description='1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json',
    )


class Profile(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    personaname: str | None = Field(None, description="Player's Steam name", example='420 booty wizard')
    name: str | None = Field(None, description='name')
    plus: bool | None = Field(None, description='Boolean indicating status of current Dota Plus subscription')
    cheese: int | None = Field(None, description='cheese')
    steamid: str | None = Field(None, description='steamid')
    avatar: str | None = Field(None, description='avatar')
    avatarmedium: str | None = Field(None, description='avatarmedium')
    avatarfull: str | None = Field(None, description='avatarfull')
    profileurl: str | None = Field(None, description='profileurl')
    last_login: str | None = Field(None, description='last_login')
    loccountrycode: str | None = Field(None, description='loccountrycode')
    is_contributor: bool | None = Field(
        False,
        description='Boolean indicating if the user contributed to the development of OpenDota',
    )
    is_subscriber: bool | None = Field(False, description='Boolean indicating if the user subscribed to OpenDota')


class PlayersResponse(BaseModel):
    solo_competitive_rank: int | None = Field(None, description='solo_competitive_rank')
    competitive_rank: int | None = Field(None, description='competitive_rank')
    rank_tier: float | None = Field(None, description='rank_tier')
    leaderboard_rank: float | None = Field(None, description='leaderboard_rank')
    profile: Profile | None = Field(None, description='profile')


class PlayerTotalsResponse(BaseModel):
    field: str | None = Field(None, description='field')
    n: int | None = Field(None, description='number')
    sum: float | None = Field(None, description='sum')


class PlayerWardMapResponse(BaseModel):
    obs: dict[str, Any] | None = Field(None, description='obs')
    sen: dict[str, Any] | None = Field(None, description='sen')


class PlayerWinLossResponse(BaseModel):
    win: int | None = Field(None, description='Number of wins')
    lose: int | None = Field(None, description='Number of loses')


class PlayerWordCloudResponse(BaseModel):
    my_word_counts: dict[str, Any] | None = Field(None, description='my_word_counts')
    all_word_counts: dict[str, Any] | None = Field(None, description='all_word_counts')


class PublicMatchesResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    match_seq_num: int | None = Field(None, description='match_seq_num')
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    duration: int | None = Field(None, description='Duration of the game in seconds')
    lobby_type: int | None = None
    game_mode: int | None = None
    avg_rank_tier: int | None = None
    num_rank_tier: int | None = None
    cluster: int | None = None
    radiant_team: list[int] | None = Field(None, description='radiant_team')
    dire_team: list[int] | None = Field(None, description='dire_team')


class Ranking(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    score: float | None = Field(None, description='Score')
    steamid: str | None = Field(None, description='steamid')
    avatar: str | None = Field(None, description='avatar')
    avatarmedium: str | None = Field(None, description='avatarmedium')
    avatarfull: str | None = Field(None, description='avatarfull')
    profileurl: str | None = Field(None, description='profileurl')
    personaname: str | None = Field(None, description="Player's Steam name", example='420 booty wizard')
    last_login: datetime | None = Field(None, description='last_login')
    full_history_time: datetime | None = Field(None, description='full_history_time')
    cheese: int | None = Field(None, description='cheese')
    fh_unavailable: bool | None = Field(None, description='fh_unavailable')
    loccountrycode: str | None = Field(None, description='loccountrycode')
    rank_tier: int | None = Field(None, description='rank_tier')


class RankingsResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    rankings: list[Ranking] | None = Field(None, description='rankings')


class RecordsResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    score: int | None = Field(None, description='Record score')


class ScenarioItemTimingsResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    item: str | None = Field(None, description='Purchased item')
    time: int | None = Field(None, description='Ingame time in seconds before the item was purchased')
    games: str | None = Field(
        None,
        description='The number of games where the hero bought this item before this time',
    )
    wins: str | None = Field(
        None,
        description='The number of games won where the hero bought this item before this time',
    )


class ScenarioLaneRolesResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    lane_role: int | None = Field(None, description="The hero's lane role")
    time: int | None = Field(None, description='Maximum game length in seconds')
    games: str | None = Field(None, description='The number of games where the hero played in this lane role')
    wins: str | None = Field(
        None,
        description='The number of games won where the hero played in this lane role',
    )


class ScenarioMiscResponse(BaseModel):
    scenario: str | None = Field(None, description="The scenario's name or description")
    is_radiant: bool | None = Field(None, description='Boolean indicating whether Radiant executed this scenario')
    region: int | None = Field(None, description='Region the game was played in')
    games: str | None = Field(None, description='The number of games where this scenario occurred')
    wins: str | None = Field(None, description='The number of games won where this scenario occured')


class SchemaResponse(BaseModel):
    table_name: str | None = Field(None, description='table_name')
    column_name: str | None = Field(None, description='column_name')
    data_type: str | None = Field(None, description='data_type')


class SearchResponse(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    avatarfull: str | None = Field(None, description='avatarfull')
    personaname: str | None = Field(None, description="Player's Steam name", example='420 booty wizard')
    last_match_time: str | None = Field(None, description='last_match_time. May not be present or null.')
    similarity: float | None = Field(None, description='similarity')


class TeamHeroesResponse(BaseModel):
    hero_id: int | None = Field(None, description='The ID value of the hero played')
    name: str | None = Field(None, description='Hero name', example='Anti-Mage')
    games_played: int | None = Field(None, description='Number of games played')
    wins: int | None = Field(None, description='Number of wins')


class TeamMatchObjectResponse(BaseModel):
    match_id: int | None = Field(
        None,
        description='The ID number of the match assigned by Valve',
        example=3703866531,
    )
    radiant: bool | None = Field(None, description='Whether the team/player/hero was on Radiant')
    radiant_win: bool | None = Field(None, description='Boolean indicating whether Radiant won the match')
    radiant_score: int | None = Field(None, description='Number of kills the Radiant team had when the match ended')
    dire_score: int | None = Field(None, description='Number of kills the Dire team had when the match ended')
    duration: int | None = Field(None, description='Duration of the game in seconds')
    start_time: int | None = Field(None, description='The Unix timestamp at which the game started')
    leagueid: int | None = Field(None, description='Identifier for the league the match took place in')
    league_name: str | None = Field(None, description='Name of league the match took place in')
    cluster: int | None = Field(None, description='cluster')
    opposing_team_id: int | None = Field(None, description='Opposing team identifier')
    opposing_team_name: str | None = Field(None, description="Opposing team name, e.g. 'Evil Geniuses'")
    opposing_team_logo: str | None = Field(None, description='Opposing team logo url')


class TeamObjectResponse(BaseModel):
    team_id: int | None = Field(None, description="Team's identifier")
    rating: float | None = Field(None, description='The Elo rating of the team')
    wins: int | None = Field(None, description='The number of games won by this team')
    losses: int | None = Field(None, description='The number of losses by this team')
    last_match_time: int | None = Field(None, description='The Unix timestamp of the last match played by this team')
    name: str | None = Field(None, description='Team name', example='Newbee')
    tag: str | None = Field(None, description='The team tag/abbreviation')


class TeamPlayersResponse(BaseModel):
    account_id: int | None = Field(None, description='The player account ID')
    name: str | None = Field(None, description='name')
    games_played: int | None = Field(None, description='Number of games played')
    wins: int | None = Field(None, description='Number of wins')
    is_current_team_member: bool | None = Field(None, description='If this player is on the current roster')
